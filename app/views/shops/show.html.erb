<div class="spnew">
  <div class="spnewMain">
    <div class=spnewMain-format>
      <div class="format_content">
        <h2 class="format-title">お店情報詳細</h2>
        <%= form_with(model: @shop, local: true) do |form| %>
          <div class="spnewMain_contents">
            <div id='mapArea'></div>
            <div class="spnewMain_contents__content">
              <div class="spnewMain_contents__content__head">
                <div class="spnewMain__content__file">
                  <div class="spnewMain__content__file__up">
                    <div class="h3.sell__main__content__file__up__head">
                      <script>
                        let map
                        let geocoder
                        function initMap(){ //コールバック関数
                          geocoder = new google.maps.Geocoder()
                          if(document.getElementById('map')){ //'map'というidを取得できたら実行
                            map = new google.maps.Map(document.getElementById('map'), { //'map'というidを取得してマップを表示
                              center: {lat: 35.681236, lng: 139.767125}, //最初に表示する場所（今回は「渋谷スクランブル交差点」が初期値）
                              zoom: 15, //拡大率（1〜21まで設定可能）
                            });
                          }else{ //'map'というidが無かった場合
                            map = new google.maps.Map(document.getElementById('mapArea'), { //'show_map'というidを取得してマップを表示
                              center: {lat: gon.lat, lng: gon.lng}, //controllerで定義した変数を緯度・経度の値とする（値はDBに入っている）
                              zoom: 18, //拡大率（1〜21まで設定可能）
                            });
                            marker = new google.maps.Marker({ //GoogleMapにマーカーを落とす
                              position:  {lat: gon.lat, lng: gon.lng}, //マーカーを落とす位置を決める（値はDBに入っている）
                              map: map //マーカーを落とすマップを指定
                            });
                          }
                        }
                        function codeAddress(){ //コールバック関数
                          let inputAddress = document.getElementById('address').value; //'address'というidの値（value）を取得

                          geocoder.geocode( { 'address': inputAddress}, function(results, status) { //ジオコードしたい住所を引数として渡す
                            if (status == 'OK') {
                              let lat = results[0].geometry.location.lat(); //ジオコードした結果の緯度
                              let lng = results[0].geometry.location.lng(); //ジオコードした結果の経度
                              let mark = {
                                  lat: lat, //緯度
                                  lng: lng  //経度
                              };
                              map.setCenter(results[0].geometry.location); //最も近い、判読可能な住所を取得したい場所の緯度・経度
                              let marker = new google.maps.Marker({
                                  map: map, //マーカーを落とすマップを指定
                                  position: results[0].geometry.location //マーカーを落とす位置を決める
                              });
                            } else {
                              alert('該当する結果がありませんでした');
                            }
                          });   
                        }
                      </script>  
                      <script src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=<%= ENV['GOOGLE_MAP_API_KEY'] %>&callback=initMap&libraries=places&v=weekly" async defer"></script>
                    </div>
                    <div class="spnewMain__content__form">
                      <strong>店名:</strong>
                      <span class="form-require"></span>
                      <%= @shop.name %>
                    </div>
                    <div class="spnewMain__content__form">
                      <strong>場所:</strong>
                      <span class="form-require"></span>
                      <%= @shop.map.address %>
                    </div>
                    <div class="spnewMain__content__form">
                      <tr>
                        <td><%= form.label :所要時間 %></td>
                        <th><%= Arrivaltime.find(@shop.arrivaltime).value %>分</th>
                      </tr>
                    </div>
                    <div class="spnewMain__content__form">
                      <tr>
                        <td><%= form.label :値段 %></td>
                        <th><%= @shop.price %>円</th>
                      </tr>  
                    </div>
                    <div class="tagbox">
                      <% if tag %>
                        <% @shop.tags.each do |tag| %>
                          <div id="tag-#{tasg.id}" >            
                            <%= link_to "##{tag}","/tags/#{tag.name}" %>
                            <%# <%= tag.created_at %>
                            <%# <%= render 'shop/tag_list', tag_list: shop.tag_list %> 
                            <%# <%= link_to '編集', edit_shop_tag_path(@shop.id), class: 'btn btn-primary mr-3' %> 
                            <%# <%= link_to '削除', "/shops/#{@tag.id,shop_id}" , method: :delete, remote: true, data: {confirm: "タスク「#{tag.name}」を削除します。よろしいですか？"}, class: 'btn btn-danger delete', id: "delete_link_#{tag.id}" %> 
                          </div>
                        <% end %>
                      <% else %>
                        <p>#タグ表示欄を追加</p>
                        <%= link_to 'タグ追加', '#' %>
                      <% end %>
                    </div>      
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
      <div class="back">
        <% if user_signed_in? && current_user.id == @shop.user_id %>
          <%= link_to '戻る', shops_path, class:"backBtn" %>
          <div class="backBox">
            <%= link_to '編集', edit_shop_path(@shop), class:"editBtn" %> |
            <%= link_to "削除", "/shops/#{@shop.id}", method: :delete %>
          </div>
          <% else %>
            <%= link_to '戻る', shops_path, class:"backBtn" %>
        <% end %>
      </div>
    </div>
    <div class="commentBox">
      <% if current_user %>
        <%= form_with(model: [@shop, @comment], local: true) do |form| %>
          <%= form.label :コメントエリア %>
          <%= form.text_area :text, placeholder:"\n\n（任意、1000文字まで)\nランチに誘うのに使ってください", rows: "10", cols:"50" %>
          <%= form.submit 'コメントを送信する' %>
        <% end %>
      <% else %>
        <strong><p>※※※ コメントの投稿には新規登録/ログインが必要です ※※※</p></strong>
      <% end %>
      <div class="commentBox_area">
        <h4>＜コメント一覧＞</h4>
        <% if @comments %>
          <% @comments.each do |comment| %>
            <p>
              <strong><%= link_to comment.user.nickname, "/users/#{comment.user_id}" %>：</strong>
              <%= comment.text %>
            </p>
          <% end %>
        <% end %>
      </div>
    </div>
  </div>
  <div class="spnewMain-ad">
    <div class="spnewMain-ad-content">
      飲食店社内用クーポン
    <h4 class="mt-2">期間限定クーポン一覧</h4>
    <div class="card-group mt-2">
      <% @coupons.each do |coupon| %>
        <%= render partial: 'coupon', locals: { coupon:coupon } %>
      <% end %>
    </div>
    </div>
  </div>
</div>